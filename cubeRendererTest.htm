<!doctype html>
<html>
<head>
<script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js"></script>
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
<link rel="stylesheet" href="http://getbootstrap.com/assets/css/docs.min.css">
<style type="text/css">
	span.dimension {
		padding: 15px 10px;
		font-size:14px;
		font-weight:700;
		line-height:1.1;
		text-align:center;
		border-radius:4px;
		border: 1px solid #ddd;
		cursor:pointer;
	}
	div.dimensionSelector{
		padding:2px;
		border: 1px solid #eee;
		border-left-width: 5px;
		width: 100%;
		border-left-color:green;
	}
	div.cubeDim,div.cubeTop{
		padding-left:20px;
		margin: 20px 0;
		border: 1px solid #eee;
		border-left-width: 5px;
		width: 100%;
	}
	div.cubeTop>.headerWrapper{
		max-height:600px;
		overflow:auto;
	}
	span.cubeItem{
		margin-left:5px;
	}
</style>
</head>
<body ng-app="Satchmo">
<div class="container" ng-controller='testModel'><div class="col-md-6 panel">
<div class="dimensionSelector pull-left">
<span class="dimension pull-left bg-success" ng-repeat="dim in dimensions" ng-dblclick="moveDim($index,'out')">{{dim}}
<small style="cursor:pointer" ng-click="toggleHide(dim)">{{dimhide[dim]?"+":"-"}} </small>
</span>
<span class="dimension pull-right bg-info" ng-repeat="dim in availableDimensions" ng-dblclick="moveDim($index,'in')">{{dim}}
</span>
</div>
<div class="clearfix"></div>
<hr>
<div apixio-dimensions="dimensions" apixio-cube="model"
	cube-renderer="jobCubeRenederer">
</div> 
</div>
</div></div>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.20/angular.min.js"></script>
<script type='text/javascript'>
var satchmo=angular.module('Satchmo',[]);
satchmo.controller('testModel',["$rootScope","$scope","MockModel","JobCubeRenderer",function($rootScope,$scope, model,cube){
	$scope.model=model.model;
	$scope.dimensions=['status'];
	$scope.availableDimensions=['activityName','orgID'];
	$scope.dimhide={}
	$scope.toggleHide=function(dim){
		$scope.dimhide[dim]=!$scope.dimhide[dim];
		$rootScope.$broadcast('hideDim',dim,$scope.dimhide[dim]);
	}
	$scope.moveDim=function(index,dir){
		var src=(dir=='out')? 'dimensions':'availableDimensions';
		var dest=(dir=='out')? 'availableDimensions':'dimensions';
		$scope[dest]=$scope[dest].concat($scope[src][index]);	
		$scope[src]=_.filter($scope[src],function(item,i){return i!==index})
		$scope.dimhide={};
	}
	$scope.jobCubeRenederer=cube;	
}]);
satchmo.factory('JobCubeRenderer',["$rootScope",function($rootScope){
	var detailTemplate='<div class="cubeRow" ng-class="rnd.getDimClass(info)" ng-click="rnd.alert(info)"><span class="cubeItem" ng-repeat="(id,val) in info.data"><small>{{id}}:</small><strong>{{val}}</strong></span> <a href="" ng-show="rnd.isFailed(info)"> Resubmit</a></div>'
	var headerTemplate='<div class="cubeDim" ng-class="rnd.getDimClass(info)" ><h4><small style="cursor:pointer"ng-click="hideKids=!hideKids">{{hideKids?"+":"-"}} </small><small>{{info.scope.apixioDimensions[info.dim.length-1]}}: </small> {{info.dim[info.dim.length-1]}}: <small> ({{info.count}} {{info.count==1?"job":"jobs"}}) <a href="" ng-show="rnd.isFailed(info)&&info.count>1">Resubmit</a></small></h4></div>';
	var topRowTemplate='<div class="cubeTop" ><h4><small style="cursor:pointer"ng-click="hideKids=!hideKids">{{hideKids?"+":"-"}} </small>Total Jobs:<small>{{info.count}} <a href="">Resubmit All Failed Jobs</a></small></h4></div>';
	var childWrapper='<div class="headerWrapper" ng-hide="hideKids"></div>'
	function getStatusFromDimensions(info){
			var statusIndex=-1;
			_.each(info.scope.apixioDimensions,function(dim,idx){
				if(dim=='status')
					statusIndex=idx;
			});
			if(statusIndex<0)
				return 'notInDims';
			if(info.dim.length>statusIndex)
				return info.dim[statusIndex];
			return 'unknown';			
	}
	var scopeFunctions={
		getDimClass:function(info){
			var stat=getStatusFromDimensions(info)
			if(stat=='notInDims')
				if(info.data)
					if(info.data.status)
						stat=info.data.status;
			stats={'failed':' text-danger','running': ' text-success', 'queued':' text-info','unknown':'',notInDims:''};
			info.hasStatus=stat;
			return stats[stat];
		}
		,isFailed:function(info){
			if(!info.hasStatus)
				info.scope.rnd.getDimClass(info);
			return info.hasStatus=='failed';
		}
		,getDimHeader:function(info){
			return info.scope.apixioDimensions[info.dim.length-1]+':'+info.dim[info.dim.length-1]+':'+info.count;
		}
	}
	function Renderer(){
	}
	Renderer.prototype={
		decorateScope:function(scope){
			scope.rnd=scopeFunctions;
		}
		,getLineData:function(rowInfo){
			var sortKey=rowInfo.data.activityName || rowInfo.data.status|| rowInfo.data.orgID || rowInfo.data.jobID;
			return {
				info:rowInfo
				,template:detailTemplate
				,wrapper:childWrapper
				,bubble:{count:1,sort:sortKey}
			};
		}
		,getHeaderData:function(headerInfo){
			headerInfo.count=_.reduce(headerInfo.kids,function(memo,kid){return memo+kid.bubble.count},0)
			headerInfo.kids=_.sortBy(headerInfo.kids,function(kid,idx){return kid.bubble.sort||idx});			
			return{
				info:headerInfo
				,template:headerTemplate
				,wrapper:childWrapper
				,bubble:{count:headerInfo.count,keys:headerInfo.keys}
			}
		}
		,getTopRowData:function(topRowInfo){
			topRowInfo.count=_.reduce(topRowInfo.kids,function(memo,kid){return memo+kid.bubble.count},0)
			topRowInfo.kids=_.sortBy(topRowInfo.kids,function(kid,idx){return kid.bubble.sort||idx});
			return {
				info:topRowInfo
				,template:topRowTemplate				
				,wrapper:childWrapper
			}
		}
	}
	return {
		makeRenderer:function(){
			return new Renderer();
		}
	}
}]);
satchmo.directive('apixioCube',[function(){
	return {
		controller:'DataCubeController'
		,scope:{
			apixioCube:'='
			,apixioDimensions:'='
			,cubeRenderer:'='
		}
		,link:function($scope,elem,attr,ctrl){
			var semaphore={going:0,gone:0};
			function renderModel(){
				_.each($scope.cachedScopes,function(s){
					s.$destroy();
				});
				$scope.cachedScopes=[];
				var el=ctrl.renderCube($scope);
				elem.empty();
				elem.append(el);
				return true;
			}
			$scope.$watch('apixioCube',renderModel);
			$scope.$watch('apixioDimensions',function(newVal,oldVal){
				if(!_.isEqual(newVal,oldVal))
					renderModel()
				});
		}
	};
}]);
satchmo.controller('DataCubeController',["DataCube","$compile","$rootScope"
	,function(cubeFactory,$compile,$rootScope){
	function CubeRenderer(cube,renderer,scope){
		this._renderer=renderer.makeRenderer();
		this.scope=scope;
		this.cube=cube;
	}
	CubeRenderer.prototype={
		get cube(){
			return this._cube;
		}
		,set cube(v){
			this._cube=v;
			this._data=this.renderCube(this._cube,[]);
		}
		,set scope(v){
			if(this._renderer)
				this._renderer.decorateScope(v);
			this._scope=v;
		}
		,get data(){
			return this._data;
		}
		,renderCube:function(model,keys){
			var data=this._renderInside(model,keys);
			return this._renderTopRow(data);
		}
		,_renderInside:function(model,keys){
			if(_.isArray(model))
				return this._renderDetails(model,keys)
			return this._renderDimension(model,keys)
		}
		,_wrapKids:function(info){
			return $compile(info.wrapper)(info.info.scope,function(el,scope){
				_.each(scope.info.kids,function(kid){
					el.append(kid.row);
				});
			});
		}
		,_renderTemplate:function(info){
			var scope=this._scope.$new();
			this._scope.cachedScopes.push(scope);
			var self=this;
			scope.info=info.info;
			info.info.scope=scope;
			return $compile(info.template)(scope,function(clone,scope){
				if(!scope.info.kids) return;
				scope.$on('hideDim',function(ev,dim,hide){
					if(scope.info.dim)
					if(scope.apixioDimensions[scope.info.dim.length-1]==dim){
							scope.hideKids=hide;
							ev.preventDefault();
					}
				})
				clone.append(self._wrapKids(info));
			});		
		}
		,_renderDetails:function(model,keys){
			return _.map(model,function(m,k){
				var lineData=this._renderer.getLineData({dim:keys,data:m});
				return {
					row: this._renderTemplate(lineData)
					,bubble:lineData.bubble
				};
			},this);
		}
		,_renderDimension:function(model,keys){
			return _.map(model,function(m,k){
				var crumbs=keys.concat(k);
				var headerData=this._renderer.getHeaderData({
						dim:crumbs
						,kids:this._renderInside(m,crumbs)
				});
				return {
					row: this._renderTemplate(headerData)
					,bubble:headerData.bubble
				};
			},this);
		}
		,_renderTopRow:function(allRows){
			var topRowData=this._renderer.getTopRowData({kids:allRows});
			return this._renderTemplate(topRowData);
		}		
	};
	this.renderCube=function(scope){
		console.log('render cube');
		var cube=cubeFactory.makeCube(scope.apixioCube,scope.apixioDimensions);
		return (new CubeRenderer(cube.cube,scope.cubeRenderer,scope)).data;
	}
}]);
satchmo.factory("MockModel",function(){
var model=[];
function randomJob(){
	function getRandomNumber(min,max){
		return Math.round((max-min)*Math.random())+min;
	}
	var activities=["summary","migrateAPO","qaAndRecoverEventCorrected","persist"
	,"ocr","qa-fromSeqfile","patientUUIDLinkCheckAndRecovery","event"
	,"afsDownloadAndModify","patientUUIDCheckAndRecovery","dataCheckAndRecovery"
	,"linkMigration","loadAPO","rerunPersistReducer","trace","qaLinkMigration"]
	var status=["queued","running","failed"]
	return {jobID:getRandomNumber(0,1000)+112345
	,orgID:getRandomNumber(120,125)
	,activityName:activities[getRandomNumber(0,activities.length-1)]
	,status:status[getRandomNumber(0,status.length-1)]
	}
}
for (var i=0;i<100;i++)
	model.push(randomJob());
return {
	model:model
	}
});
satchmo.factory("DataCube",function(){
function Cube(model,keys){
	this.model=model;
	this.keys=keys;
}
Cube.prototype={
	get cube(){
		return this._cube;
	}
	,get model(){
		return this._model;
	}
	,set model(v){
		this._model=this._makeArray(v);
		this._resetCube();
	}
	,get keys(){
		return this._keys;
	}
	,set keys(v){
		this._keys=this._makeArray(v);
		this._resetCube();
	}
	,_resetCube:function(){
		this._dims={};
		this._cube=this._model;
		if(this._model)
			if(this._keys)
				this.makeCube();
	}
	,_makeArray:function(v){
		if(!v) return null;
		if(!_.isArray(v)) v=[v];
		return v;
	}
	,makeCube:function(){
		this._makeDims();
		this._cube=this._aggregate(this._model,this._keys,0);
	}
	,_makeDims:function(){
		this._dims={};
		_.each(this._keys,function(d){
			this._dims[d]=true;
		},this);
	}
	,_aggregate:function(model,keys,i){
		var key=keys[i];
		var result={};
		if(keys.length>i)
			_.each(_.groupBy(model,key),function(m,k){
				result[k]=this._aggregate(m,keys,i+1);
			},this);
		else
			return this._removeDims(model);
		return result;
	}
	,_removeDims:function (model){
		return _.map(model,function(m){
			var result={};
			_.each(m,function(v,k){
				if(!this._dims[k])
					result[k]=v;
			},this);
			return result;
		},this);
	}
};
	return {
		makeCube:function(model,keys){
			return new Cube(model,keys);
		}
	}
});
</script>
</body>
</html>